// Generated by CoffeeScript 1.6.2
(function() {
  window.hv = window.hv || {};

  window.hv.ProcessHistory = function(filter) {
    var addContextClasses, blockId, blockStyle, blocks, createBlocks, idToRef, idToVid, logInfo, processHistoryItems, processVisitItems, processed, siteHistory, tabconnections, visitIdAufSID;

    processed = 0;
    tabconnections = [];
    siteHistory = {};
    idToRef = {};
    idToVid = {};
    visitIdAufSID = [];
    blockId = 0;
    blocks = {};
    blockStyle = [];
    this.loadHistory = function() {
      return chrome.storage.local.get("tabConnections", function(result) {
        if (result.tabConnections) {
          tabconnections = result.tabConnections;
        } else {
          tabconnections = [];
        }
        return processHistoryItems();
      });
    };
    processHistoryItems = function() {
      var date, daydate, endtime, microsecondsPerDay, mode, starttime, time;

      time = filter.time;
      mode = filter.mode;
      processed = 0;
      date = new Date();
      daydate = date.getTime() - ((((date.getHours() + 1) * 60 + date.getMinutes()) * 60 + date.getSeconds()) * 1000);
      microsecondsPerDay = 1000 * 60 * 60 * 24;
      endtime = daydate - (microsecondsPerDay * (time - 1));
      starttime = daydate - (microsecondsPerDay * (30 + time));
      return chrome.history.search({
        text: filter.query,
        startTime: starttime,
        endTime: endtime,
        maxResults: filter.results
      }, function(historyItems) {
        historyItems.forEach(function(site) {
          processed++;
          return chrome.history.getVisits({
            url: site.url
          }, function(visitItems) {
            return processVisitItems(site, visitItems);
          });
        });
        return null;
      });
    };
    processVisitItems = function(site, visitItems) {
      var count, i, id, ref, referrer, siteItem, time, type, vid, vids, _i, _len;

      referrer = vids = [];
      id = site.id;
      vid = visitItems[visitItems.length - 1].visitId;
      ref = visitItems[visitItems.length - 1].referringVisitId;
      type = visitItems[visitItems.length - 1].transition;
      time = visitItems[visitItems.length - 1].visitTime;
      count = site.visitCount;
      for (_i = 0, _len = visitItems.length; _i < _len; _i++) {
        i = visitItems[_i];
        if (i.visitId > vid - 300) {
          if (tabconnections[i.visitId] != null) {
            referrer.push(tabconnections[+i.visitId]);
          }
          if (i.referringVisitId !== "0") {
            referrer.push(i.referringVisitId);
          }
          visitIdAufSID[i.visitId] = id;
        }
      }
      idToRef[id] = referrer;
      siteItem = {
        sid: id,
        vid: vid,
        url: site.url,
        title: site.title,
        type: type,
        ref: ref,
        relevance: count,
        time: time,
        block: 0
      };
      siteHistory[id] = siteItem;
      processed--;
      if (processed === 0) {
        createBlocks();
      }
      return null;
    };
    createBlocks = function() {
      var block, i, id, k, s, v, val, vid, _i, _j, _len, _len1, _ref;

      block = 1;
      for (k in siteHistory) {
        val = siteHistory[k];
        processed++;
        id = val.sid;
        vid = val.vid;
        _ref = idToRef[id];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          processed++;
          if (visitIdAufSID[v] != null) {
            if (siteHistory[visitIdAufSID[v]].block !== 0) {
              if (val.block !== 0) {
                for (_j = 0, _len1 = siteHistory.length; _j < _len1; _j++) {
                  s = siteHistory[_j];
                  if (s.block === val.block) {
                    s.block = siteHistory[visitIdAufSID[v]].block;
                  }
                }
              }
              val.block = siteHistory[visitIdAufSID[v]].block;
            } else {

            }
            if (val.block === 0) {
              siteHistory[visitIdAufSID[v]].block = val.block = block;
              block++;
            } else {
              siteHistory[visitIdAufSID[v]].block = val.block;
            }
          }
          processed--;
        }
        processed--;
      }
      console.log(block);
      if (processed === 0) {
        for (k in siteHistory) {
          i = siteHistory[k];
          logInfo([i.url.substr(0, 40), i.sid, i.vid, i.ref, i.type, i.block]);
        }
      }
      return null;
    };
    addContextClasses = function() {
      /*
      bmsProcessed = 0;
      for key,val of siteHistory
        bmsProcessed++
        bookmark = if bookMarks[val.url]?
          #console.log blocks[key]
          bookMarks[val.url].bid
          val.bookmark = true
          blockStyle[blocks[key]] = bookMarks[val.url].context
      
      
      if bmsProcessed = filter.results
        # Nach AktualitÃ¤t sortieren und daraufhin Rendern
        siteHistory.sort (a,b) -> return if a.vid <= b.vid then 1 else -1
        count = 0
        for key,item of siteHistory.reverse()
          specialise(item)
          count++
      
        if count = filter.results
          for context,v of storedContexts
            button = "button." + context
            content = "div.head." + context + ", div.content."+context+".bookmark"
            $(button).css "background", v.color
            $(content).css "background", v.color
            if(!v.active) then toggleActiveState(context)
      */
      return null;
    };
    logInfo = function(infoarray) {
      var i, info, k, siteinfo;

      siteinfo = $("<div>");
      for (k in infoarray) {
        i = infoarray[k];
        info = $("<div>");
        info.text(i);
        info.addClass("infotext");
        if (k === "0") {
          info.addClass("title");
        }
        siteinfo.append($(info));
      }
      return $("#historycontent").append($(siteinfo));
    };
    return null;
  };

}).call(this);
