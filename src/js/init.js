// Generated by CoffeeScript 1.6.2
(function() {
  var createBlocks, createHistory, filter, googlevisible, max, min, reload, start, tabArray, v_max;

  v_max = 0;

  filter = {
    results: 50,
    time: 0,
    query: "",
    mode: "none"
  };

  min = 50;

  max = 2000;

  googlevisible = true;

  console.log("stsrat");

  tabArray = {};

  $(document).ready(function() {
    chrome.storage.local.get("query", function(result) {
      if (result.query != null) {
        filter.query = result.query;
        return $("#search").val(result.query);
      }
    });
    $("#search").change(function() {
      filter.query = $('#search').val();
      $("#historycontent").empty();
      chrome.storage.local.set({
        "query": filter.query
      });
      return reload();
    });
    $("#bookmarklist").on("click", "h2", function() {
      var context;

      context = $(this).context.className.split(" ")[0];
      toggleActiveState(context);
      if (context === "nocontext" && (storedContexts[context] == null)) {
        storedContexts[context] = {
          active: true
        };
      }
      if (storedContexts[context].active) {
        storedContexts[context].active = false;
      } else {
        storedContexts[context].active = true;
      }
      chrome.storage.local.set({
        "storedContexts": storedContexts
      });
      return null;
    });
    $("#configbar").on("click", "#hidegoogle", function() {
      $(".googleblock").toggle("fast");
      return googlevisible = !googlevisible;
    });
    chrome.storage.local.get("hSlider", function(result) {
      var query_slider, xpos;

      xpos = 0;
      if (result.hSlider != null) {
        xpos = result.hSlider;
      } else {
        null;
      }
      query_slider = new Dragdealer('simple-slider', {
        x: result.hSlider,
        steps: max,
        callback: function(x) {
          filter.results = parseInt((max - min) * query_slider.value.current[0] + min);
          chrome.storage.local.set({
            "hSlider": x
          });
          return reload();
        },
        animationCallback: function(x) {
          return $("#handle_amount").text(parseInt((max - min) * x + min));
        }
      });
      filter.results = parseInt((max - min) * xpos + min);
      return start();
    });
    return null;
  });

  chrome.tabs.onUpdated.addListener(function(tabId, changeInfo, tab) {
    if (changeInfo.status === "complete") {
      if (tab.url !== "chrome://newtab/") {
        return reload();
      }
    }
  });

  createBlocks = function() {
    var $contextgroup, block, blocksToProcess, cblock, contextGroup, fblock, item, key, nocontextGroup, _i, _j, _k, _len, _len1, _len2;

    blocksToProcess = blocks.length;
    blocks.sort(function(a, b) {
      if (a.time <= b.time) {
        return 1;
      } else {
        return -1;
      }
    });
    for (_i = 0, _len = blocks.length; _i < _len; _i++) {
      block = blocks[_i];
      blocksToProcess--;
      if ((block != null) && !block.processed) {
        if (block.context === "") {
          nocontextGroup = $("<div>");
          nocontextGroup.addClass("contextgroup");
          nocontextGroup.addClass("group" + block.id);
          nocontextGroup.addClass("nocontext");
          if (block.google) {
            nocontextGroup.addClass("googleblock");
          }
          $("#historycontent").append($(nocontextGroup));
        } else {
          for (_j = 0, _len1 = blocks.length; _j < _len1; _j++) {
            cblock = blocks[_j];
            if ((cblock != null) && cblock.context === block.context) {
              contextGroup = $("<div>");
              contextGroup.addClass("contextgroup");
              contextGroup.addClass("group" + cblock.id);
              contextGroup.addClass(block.context);
              $("#historycontent").append($(contextGroup));
              cblock.processed = true;
              if (!storedContexts[block.context].active) {
                $(".group" + cblock.id).hide();
              }
            }
          }
        }
      }
      if (blocksToProcess === 1) {
        siteHistory.reverse();
        for (key in siteHistory) {
          item = siteHistory[key];
          $contextgroup = $(".group" + item.block);
          specialise(item, $contextgroup);
          for (_k = 0, _len2 = blocks.length; _k < _len2; _k++) {
            fblock = blocks[_k];
            if ((fblock != null) && item.block === fblock.id && fblock.context !== "") {
              $(".group" + item.block + " .panel .head").css("background", storedContexts[fblock.context].color);
            }
          }
        }
      }
    }
    if (!googlevisible) {
      $(".googleblock").toggle("fast");
    }
    if (!storedContexts["nocontext"].active) {
      $("#historycontent .nocontext").hide();
    }
    return $(".head").hover((function() {
      var sInfo;

      sInfo = {};
      sInfo.url = $(this).attr("url");
      sInfo.vid = $(this).attr("vid");
      sInfo.title = $(this).attr("title");
      sInfo.time = $(this).attr("time");
      createButtons($(this), "", sInfo);
      return addClearDiv($(this));
    }), function() {
      $(this).find("button").remove();
      return $(this).find(".clear").remove();
    });
  };

  createHistory = function() {
    chrome.tabs.query({}, function(tabs) {
      var i, _i, _len, _results;

      _results = [];
      for (_i = 0, _len = tabs.length; _i < _len; _i++) {
        i = tabs[_i];
        _results.push(tabArray[i.url] = i.id);
      }
      return _results;
    });
    return loadHistory(createBlocks);
  };

  start = function() {
    return loadBookmarks(createHistory);
  };

  /*
  initSlider = (hSlider) ->
    query_slider = new Dragdealer 'simple-slider',
      x: hSlider, steps: max
      callback: (x) -> filter.results = parseInt (max-min)*query_slider.value.current[0]+min;  chrome.storage.local.set "hSlider":x; reload()
      animationCallback: (x) -> $("#handle_amount").text parseInt((max-min)*x+min)
  */


  reload = function() {
    $('#historycontent').empty();
    $('#bookmarklist').empty();
    $('.colorPicker-palette').remove();
    v_max = 10;
    tabArray = {};
    start();
    return null;
  };

}).call(this);
