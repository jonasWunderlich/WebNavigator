// Generated by CoffeeScript 1.6.2
(function() {
  var addClearDiv, addDevInfo, block, blockStyle, blockSum, blocks, bmarks, bookMarks, bookmarkIt, createBlocks, createBookmark, createButtons, createHistory, filter, hideInactiveTasks, idToRef, initSlider, lastUrl, lastVid, loadBookmarks, loadHistory, logInfo, phistory, processHistoryItems, processVisitItems, processed, reload, renderItem, renderTaskMenu, siteHistory, specialise, start, storedBookmarks, storedContexts, tabArray, tabconnections, toggleActiveState, v_max, visitIdAufSID;

  processed = 0;

  tabconnections = [];

  block = 0;

  lastVid = 0;

  lastUrl = "";

  siteHistory = [];

  visitIdAufSID = [];

  blockSum = 0;

  blocks = {};

  blockStyle = [];

  idToRef = {};

  loadHistory = function(callbackFn) {
    block = 0;
    lastVid = 0;
    lastUrl = "";
    siteHistory = [];
    visitIdAufSID = [];
    blockSum = 0;
    idToRef = {};
    blocks = {};
    blockStyle = [];
    return chrome.storage.local.get("tabConnections", function(result) {
      if (result.tabConnections) {
        tabconnections = result.tabConnections;
      } else {
        tabconnections = [];
      }
      return processHistoryItems(callbackFn);
    });
  };

  processHistoryItems = function(callbackFn) {
    var date, daydate, endtime, microsecondsPerDay, starttime, time;

    time = filter.time;
    processed = 0;
    date = new Date();
    daydate = date.getTime() - ((((date.getHours() + 1) * 60 + date.getMinutes()) * 60 + date.getSeconds()) * 1000);
    microsecondsPerDay = 1000 * 60 * 60 * 24;
    endtime = daydate - (microsecondsPerDay * (time - 1));
    starttime = daydate - (microsecondsPerDay * (30 + time));
    return chrome.history.search({
      text: filter.query,
      startTime: starttime,
      endTime: endtime,
      maxResults: filter.results
    }, function(historyItems) {
      return (historyItems.reverse()).forEach(function(site) {
        processed++;
        return chrome.history.getVisits({
          url: site.url
        }, function(visitItems) {
          return processVisitItems(site, visitItems, callbackFn);
        });
      });
    });
  };

  processVisitItems = function(site, visitItems, callbackFn) {
    var bookmark, context, count, i, id, ref, referrer, siteItem, tab, time, type, vid, vids, _i, _len;

    referrer = vids = [];
    id = site.id;
    vid = visitItems[visitItems.length - 1].visitId;
    ref = visitItems[visitItems.length - 1].referringVisitId;
    type = visitItems[visitItems.length - 1].transition;
    time = visitItems[visitItems.length - 1].visitTime;
    count = site.visitCount;
    for (_i = 0, _len = visitItems.length; _i < _len; _i++) {
      i = visitItems[_i];
      if (i.visitId > vid - 300) {
        if (tabconnections[i.visitId] != null) {
          referrer.push(tabconnections[+i.visitId]);
        }
        if (i.referringVisitId !== "0") {
          referrer.push(i.referringVisitId);
        }
        visitIdAufSID[i.visitId] = id;
      }
    }
    idToRef[id] = referrer;
    if (type === "link" && (lastVid === ref || lastUrl === site.url.substr(0, 10))) {
      null;
    } else {
      block++;
    }
    lastVid = vid;
    lastUrl = site.url.substr(0, 10);
    context = "";
    bookmark = void 0;
    if (bookMarks[site.url] != null) {
      context = bookMarks[site.url].context;
      bookmark = bookMarks[site.url].bid;
    }
    tab = tabArray[site.url] != null ? tabArray[site.url] : "";
    siteItem = {
      sid: id,
      vid: vid,
      url: site.url,
      title: site.title,
      type: type,
      ref: ref,
      relevance: count,
      time: time,
      block: block,
      context: context,
      tab: tab,
      bid: bookmark
    };
    siteHistory[id] = siteItem;
    processed--;
    if (processed === 0) {
      blockSum = block;
      return callbackFn();
    }
  };

  logInfo = function(infoarray) {
    var i, info, k, siteinfo;

    siteinfo = $("<div>");
    for (k in infoarray) {
      i = infoarray[k];
      info = $("<div>");
      info.text(i);
      info.addClass("infotext");
      if (k === "0") {
        info.addClass("title");
      }
      siteinfo.append($(info));
    }
    return $("#historycontent").append($(siteinfo));
  };

  /*
  createBlocks = () ->
    block = 1
    for id,val of siteHistory
      processed++
      for v in idToRef[id]
        processed++
        if visitIdAufSID[v]?
          if siteHistory[visitIdAufSID[v]].block != 0 #block wird geerbt
            if val.block != 0
              for s in siteHistory # noch berÃ¼cksichtigen dass andere mitgenommen werden
                if s.block == val.block then s.block = siteHistory[visitIdAufSID[v]].block
            val.block = siteHistory[visitIdAufSID[v]].block
          else
            if val.block == 0
              siteHistory[visitIdAufSID[v]].block = val.block = block #gibt nix zu erben man braucht einen neuen
              block++
            else
              siteHistory[visitIdAufSID[v]].block = val.block #gibt nix & man hat schon -> in die andere richtung vererben
        processed--
      if val.block is 0 or idToRef[id].length is 0
        val.block = block
        block++
      processed--
    if processed is 0
      for k,i of siteHistory
        logInfo([i.title.substr(0,40), i.sid, i.vid, i.ref, i.type, i.block])
  */


  storedBookmarks = {};

  storedContexts = {};

  bookMarks = {};

  loadBookmarks = function(callbackFn) {
    storedBookmarks = {};
    storedContexts = {};
    bookMarks = {};
    chrome.storage.local.get("storedBookmarks", function(result) {
      if (result.storedBookmarks) {
        return storedBookmarks = result.storedBookmarks;
      }
    });
    chrome.storage.local.get("storedContexts", function(result) {
      if (result.storedContexts) {
        return storedContexts = result.storedContexts;
      }
    });
    return renderTaskMenu(callbackFn);
  };

  renderTaskMenu = function(callbackFn) {
    var context_div, counter, head;

    context_div = $("<div>");
    context_div.addClass("bcontext");
    context_div.addClass("nocontext");
    head = $("<h2>");
    head.addClass("nocontext");
    head.text("kontextlos");
    context_div.append(head);
    $("#bookmarklist").append($(context_div));
    counter = 0;
    chrome.bookmarks.getTree(function(bookmarkTreeNodes) {
      var bm_div, bmtitle, bookmarkFolder, bookmarkFolderTitle, color, contextColor, favicon, initBookmarkFolder, m, o, title, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;

      initBookmarkFolder = bookmarkTreeNodes[0].children[0].children;
      bookmarkFolderTitle = "";
      for (_i = 0, _len = initBookmarkFolder.length; _i < _len; _i++) {
        bookmarkFolder = initBookmarkFolder[_i];
        if (bookmarkFolder.title === "conmarks") {
          bookmarkFolderTitle = bookmarkFolder;
          _ref = bookmarkFolder.children;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            m = _ref[_j];
            contextColor = "9F0";
            if (!storedContexts[m.title]) {
              storedContexts[m.title] = {
                color: contextColor,
                active: true
              };
            } else {
              contextColor = storedContexts[m.title].color;
            }
            context_div = $("<div>");
            context_div.addClass("bcontext");
            context_div.addClass(m.title);
            head = $("<div>");
            head.css("background", contextColor);
            head.addClass(m.title);
            title = $("<h2>");
            title.css("background", contextColor);
            title.addClass(m.title);
            title.text(m.title);
            color = $("<input>");
            color.attr("id", m.title);
            color.attr("name", m.title);
            color.attr("type", "text");
            color.attr("value", contextColor);
            head.append(color);
            head.append(title);
            context_div.append(head);
            color.colorPicker({
              onColorChange: function(id, newValue) {
                var button, content, newhead, newhead2;

                newhead = ".bcontext." + id + " h2";
                newhead2 = ".bcontext ." + id;
                $(newhead).css("background", newValue);
                $(newhead2).css("background", newValue);
                button = "button." + id;
                content = "div.head." + id + ", div.content." + id + ".bookmark";
                $(button).css("background", newValue);
                $(content).css("background", newValue);
                storedContexts[id].color = newValue;
                chrome.storage.local.set({
                  "storedContexts": storedContexts
                });
                return null;
              }
            });
            $("#bookmarklist").append($(context_div));
            counter++;
            if (m.children != null) {
              _ref1 = m.children;
              for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                o = _ref1[_k];
                bookMarks[o.url] = {
                  context: m.title,
                  id: o.title,
                  bid: o.id
                };
                if (!storedBookmarks[o.url]) {
                  storedBookmarks[o.url] = {
                    bid: o.id,
                    visitTime: o.dateAdded
                  };
                }
                bm_div = $("<div>");
                bm_div.addClass("bookmark");
                favicon = $("<img>");
                favicon.attr({
                  src: "chrome://favicon/" + o.url
                });
                favicon.addClass("favic");
                bm_div.append($(favicon));
                bmtitle = $("<a>");
                bmtitle.attr("href", o.url);
                bmtitle.text(o.title);
                bm_div.append(bmtitle);
                context_div.append(bm_div);
              }
            } else {
              bookMarks[m.url] = {
                context: void 0,
                id: m.title,
                bid: m.id
              };
            }
          }
        }
        null;
      }
      if (!bookmarkFolderTitle) {
        chrome.bookmarks.create({
          'parentId': "1",
          'title': 'conmarks'
        }, function(bookmarkTreeNodes) {
          chrome.bookmarks.create({
            'parentId': bookmarkTreeNodes.id,
            'title': 'privat'
          }, function(bookmarkTreeNodes) {
            return null;
          });
          chrome.bookmarks.create({
            'parentId': bookmarkTreeNodes.id,
            'title': 'arbeit'
          }, function(bookmarkTreeNodes) {
            return null;
          });
          chrome.bookmarks.create({
            'parentId': bookmarkTreeNodes.id,
            'title': 'uni'
          }, function(bookmarkTreeNodes) {
            return null;
          });
          return null;
        });
      }
      context_div = $("<div>");
      context_div.addClass("bcontext");
      context_div.addClass("newcontext");
      head = $("<h2>");
      head.addClass("newcontext");
      head.text("+");
      context_div.append(head);
      $("#bookmarklist").append($(context_div));
      hideInactiveTasks();
      callbackFn();
      return null;
    });
    return null;
  };

  hideInactiveTasks = function() {
    var button, content, context, v, _results;

    _results = [];
    for (context in storedContexts) {
      v = storedContexts[context];
      button = "button." + context;
      content = "div.head." + context + ", div.content." + context + ".bookmark";
      $(button).css("background", v.color);
      $(content).css("background", v.color);
      if (!v.active) {
        _results.push(toggleActiveState(context));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  toggleActiveState = function(context) {
    var contextClass, toggleBookmark, toggleContext;

    toggleContext = ".bcontext." + context;
    $(toggleContext).toggleClass("contextactivestate");
    toggleBookmark = "." + context + " .bookmark";
    $(toggleBookmark).toggle("fast");
    contextClass = "#historycontent ." + context;
    $(contextClass).toggle("fast");
    return null;
  };

  bookmarkIt = function(site, button) {
    var context, url;

    context = button.attr("class");
    url = site.url;
    if (bookMarks[url] != null) {
      if (bookMarks[url].context === context) {
        chrome.bookmarks.remove(storedBookmarks[url].bid, function() {
          delete storedBookmarks[site.url];
          return reload();
        });
      } else if (bookMarks[url].context !== void 0) {
        chrome.bookmarks.remove(storedBookmarks[url].bid, function() {
          delete storedBookmarks[site.url];
          return createBookmark(site, context);
        });
      }
    } else {
      createBookmark(site, context);
    }
    return null;
  };

  createBookmark = function(site, context) {
    chrome.bookmarks.getTree(function(bookmarkTreeNodes) {
      var bookmarkfolder, contextfolder, folder, m, newtitle, sub, _i, _j, _len, _len1, _ref;

      folder = bookmarkTreeNodes[0].children[0].children;
      newtitle = "" + site.vid + "___" + site.title;
      bookmarkfolder = void 0;
      contextfolder = void 0;
      for (_i = 0, _len = folder.length; _i < _len; _i++) {
        sub = folder[_i];
        if (sub.title === "conmarks") {
          bookmarkfolder = sub;
        }
      }
      _ref = bookmarkfolder.children;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        m = _ref[_j];
        if (context === m.title) {
          contextfolder = m;
          chrome.bookmarks.create({
            parentId: m.id,
            title: site.title,
            url: site.url
          }, function(BookmarkTreeNode) {
            storedBookmarks[site.url] = {
              bid: BookmarkTreeNode.id,
              visitTime: site.time
            };
            return reload();
          });
        }
      }
      if (contextfolder === void 0) {
        return chrome.bookmarks.create({
          parentId: bookmarkfolder.id,
          title: context
        }, function(bookmarkTreeNodes) {
          storedContexts[context] = {
            color: "#fff".id
          };
          console.log(bookmarkTreeNodes);
          contextfolder = bookmarkTreeNodes;
          return chrome.bookmarks.create({
            parentId: contextfolder.id,
            title: site.title,
            url: site.url
          }, function() {
            return reload();
          });
        });
      }
    });
    return null;
  };

  null;

  specialise = function(site, divToGo) {
    var context, shorten, special, title, url;

    url = site.url;
    title = site.title;
    context = void 0;
    special = void 0;
    if (((url.substr(-4)) === ".jpg") || ((url.substr(-4)) === ".png") || ((url.substr(-5)) === ".jpeg")) {
      special = "image";
      title = "@";
    } else if ((/youtube/.test(url)) && (/watch/.test(url))) {
      title = title.split("- YouTube")[0];
      if (v_max > 0) {
        url = "https://www.youtube.com/embed/" + url.split("v=")[1].split('=')[0].split('&')[0];
        special = "video";
        v_max--;
      }
    } else if (/Google-Suche/.test(title)) {
      special = "google";
    } else if (/mail.google.com/.test(url)) {
      special = "mail";
    }
    title = title.split(" - ")[0];
    title = title.split(" â ")[0];
    shorten = 20;
    title = title.length > shorten ? title.substr(0, shorten) + "..." : title;
    site.url = url;
    site.title = title;
    site.special = special;
    if (title === "") {
      special = "empty";
      site.title = url;
      renderItem(site, divToGo);
    } else {
      null;
    }
    renderItem(site, divToGo);
    return null;
  };

  renderItem = function(item, divToGo) {
    var bid, content_div, favicon, head_div, info_div, inhalt, link, notabhead, panel_div, qtl, ref, relevance, sid, special, tabhead, title, ttl, type, url, utl, vid, videoframe;

    title = item.title;
    url = item.url;
    sid = item.sid;
    vid = item.vid;
    type = item.type;
    bid = item.bid;
    special = item.special;
    ref = item.ref;
    relevance = item.relevance;
    panel_div = $("<div>");
    panel_div.addClass("panel");
    panel_div.addClass(type);
    if (item.nav != null) {
      panel_div.addClass(item.nav);
    }
    if (ref === "0") {
      panel_div.addClass("refzero");
    }
    if (relevance > 20) {
      panel_div.addClass("rel_big");
    } else if (relevance > 5) {
      panel_div.addClass("rel_some");
    } else if (relevance >= 2) {
      panel_div.addClass("rel_twice");
    }
    panel_div.addClass(special);
    content_div = $("<div>");
    head_div = $("<div>");
    info_div = $("<div>");
    content_div.addClass("content");
    info_div.addClass("infocontent");
    head_div.addClass("head");
    if (item.tab !== "") {
      tabhead = $("<div>");
      tabhead.addClass("tabbutton");
      panel_div.addClass("itsatab");
      tabhead.attr("tabid", item.tab);
      tabhead.on("click", function() {
        chrome.tabs.remove(item.tab);
        tabhead.removeClass("tabbutton");
        return panel_div.removeClass("itsatab");
      });
      info_div.click(function() {
        return chrome.tabs.get(item.tab, function(geTab) {
          return chrome.tabs.highlight({
            windowId: geTab.windowId,
            tabs: geTab.index
          }, function() {});
        });
      });
      panel_div.append($(tabhead));
    } else {
      notabhead = $("<div>");
      notabhead.addClass("notab");
      panel_div.append($(notabhead));
    }
    favicon = $("<img>");
    favicon.attr({
      src: "chrome://favicon/" + url
    });
    favicon.addClass("favicon");
    head_div.append($(favicon));
    createButtons(head_div, special, item);
    addClearDiv(head_div);
    if (item.bid !== void 0) {
      info_div.attr("bookmark", item.bid);
      info_div.css("background", storedContexts[item.context].color);
    }
    link = $("<a>");
    inhalt = $("<p>");
    link.attr({
      href: url
    });
    link.addClass("urladress");
    if (filter.query !== "") {
      qtl = filter.query.toLowerCase();
      ttl = title.toLowerCase();
      utl = url.toLowerCase();
      if (ttl.indexOf(qtl) < 0 && utl.indexOf(qtl) > 0) {
        panel_div.addClass("lessimportant");
      } else if (ttl.indexOf(qtl) < 0 && utl.indexOf(qtl) < 0) {
        panel_div.addClass("unimportant");
      }
    }
    if (special === "image") {
      content_div.css("background", "url(" + url.substr(url.search(/http/)) + ") 50% 20% ");
    }
    if (special === "google") {
      title = title.split(" - Google-Suche")[0];
      inhalt.text(title);
      inhalt.attr({
        id: sid
      });
      link.append($(inhalt));
    } else if (special === "video") {
      videoframe = $("<iframe>");
      videoframe.addClass("youtubevideo");
      videoframe.attr({
        src: url
      });
      info_div.append(videoframe);
    } else {
      inhalt.text(title);
      inhalt.attr({
        id: sid
      });
      link.append($(inhalt));
    }
    info_div.append($(link));
    content_div.append(head_div);
    content_div.append(info_div);
    panel_div.append($(content_div));
    return divToGo.append($(panel_div));
  };

  addClearDiv = function(div) {
    var clear;

    clear = $("<div>");
    clear.addClass("clear");
    return div.append($(clear));
  };

  createButtons = function(head_div, special, item) {
    var button, c, v, _results;

    if (special !== "google" && special !== "empty") {
      _results = [];
      for (c in storedContexts) {
        v = storedContexts[c];
        button = $("<button>");
        button.css("background", v.color);
        button.addClass(c);
        button.text("");
        button.on("click", function() {
          return bookmarkIt(item, $(this));
        });
        if (!storedContexts[c].active) {
          button.hide();
        }
        _results.push(head_div.append($(button)));
      }
      return _results;
    }
  };

  addDevInfo = function(div, a) {
    var i, info, _i, _len;

    for (_i = 0, _len = a.length; _i < _len; _i++) {
      i = a[_i];
      info = $("<p>");
      info.addClass("devinfo");
      info.text(i);
      div.append($(info));
    }
    return null;
  };

  v_max = 0;

  filter = {
    results: 40,
    time: 0,
    query: "",
    mode: "none"
  };

  bmarks = 0;

  phistory = 0;

  tabArray = {};

  $(document).ready(function() {
    chrome.storage.local.get("query", function(result) {
      if (result.query != null) {
        filter.query = result.query;
        return $("#search").val(result.query);
      }
    });
    chrome.storage.local.get("hSlider", function(result) {
      if (result.hSlider != null) {
        return initSlider(result.hSlider);
      } else {
        return initSlider(0);
      }
    });
    $("#search").change(function() {
      filter.query = $('#search').val();
      $("#historycontent").empty();
      chrome.storage.local.set({
        "query": filter.query
      });
      return reload();
    });
    start();
    $("#bookmarklist").on("click", "h2", function() {
      var context;

      context = $(this).context.className.split(" ")[0];
      toggleActiveState(context);
      if (context !== "nocontext") {
        if (storedContexts[context].active) {
          storedContexts[context].active = false;
        } else {
          storedContexts[context].active = true;
        }
        chrome.storage.local.set({
          "storedContexts": storedContexts
        });
      }
      return null;
    });
    return null;
  });

  createBlocks = function() {
    var $contextgroup, blockdings, contextGroup, item, key, num, _results;

    num = blockSum + 1;
    while (num -= 1) {
      contextGroup = $("<div>");
      contextGroup.addClass("contextgroup");
      contextGroup.addClass("nocontext");
      contextGroup.addClass("group" + num);
      $("#historycontent").append($(contextGroup));
    }
    blockdings = blockSum + 1;
    siteHistory.sort(function(a, b) {
      if (a.vid <= b.vid) {
        return 1;
      } else {
        return -1;
      }
    });
    _results = [];
    for (key in siteHistory) {
      item = siteHistory[key];
      $contextgroup = $(".group" + item.block);
      if (item.context !== "" && !$contextgroup.hasClass(item.context)) {
        $contextgroup.addClass(item.context);
        $contextgroup.removeClass("nocontext");
        if (!storedContexts[item.context].active) {
          $contextgroup.hide();
        }
      }
      if (blockdings > item.block) {
        blockdings--;
      }
      specialise(item, $contextgroup);
      if (item.context !== "") {
        _results.push($(".group" + item.block + " .panel .head").css("background", storedContexts[item.context].color));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  createHistory = function() {
    chrome.tabs.query({}, function(tabs) {
      var i, _i, _len, _results;

      _results = [];
      for (_i = 0, _len = tabs.length; _i < _len; _i++) {
        i = tabs[_i];
        _results.push(tabArray[i.url] = i.id);
      }
      return _results;
    });
    return loadHistory(createBlocks);
  };

  start = function() {
    return loadBookmarks(createHistory);
  };

  initSlider = function(hSlider) {
    var max, min, query_slider;

    min = 50;
    max = 500;
    return query_slider = new Dragdealer('simple-slider', {
      x: hSlider,
      steps: max,
      callback: function(x) {
        filter.results = parseInt((max - min) * query_slider.value.current[0] + min);
        chrome.storage.local.set({
          "hSlider": x
        });
        return reload();
      },
      animationCallback: function(x) {
        return $("#handle_amount").text(parseInt((max - min) * x + min));
      }
    });
  };

  reload = function() {
    $('#historycontent').empty();
    $('#bookmarklist').empty();
    v_max = 0;
    start();
    return null;
  };

}).call(this);
