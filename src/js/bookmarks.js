// Generated by CoffeeScript 1.6.2
(function() {
  var bookMarks, bookmarkIt, createBookmark, hideInactiveTasks, loadBookmarks, renderTaskMenu, storedBookmarks, storedContexts, toggleActiveState;

  storedBookmarks = {};

  storedContexts = {};

  bookMarks = {};

  loadBookmarks = function(callbackFn) {
    storedBookmarks = {};
    storedContexts = {};
    bookMarks = {};
    chrome.storage.local.get("storedBookmarks", function(result) {
      if (result.storedBookmarks) {
        return storedBookmarks = result.storedBookmarks;
      }
    });
    chrome.storage.local.get("storedContexts", function(result) {
      if (result.storedContexts) {
        return storedContexts = result.storedContexts;
      }
    });
    return renderTaskMenu(callbackFn);
  };

  renderTaskMenu = function(callbackFn) {
    var context_div, counter, head;

    context_div = $("<div>");
    context_div.addClass("bcontext");
    context_div.addClass("nocontext");
    head = $("<h2>");
    head.addClass("nocontext");
    head.text("kontextlos");
    context_div.append(head);
    $("#bookmarklist").append($(context_div));
    counter = 0;
    chrome.bookmarks.getTree(function(bookmarkTreeNodes) {
      var bm_div, bmtitle, bookmarkFolder, bookmarkFolderTitle, color, contextColor, favicon, initBookmarkFolder, m, o, title, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;

      initBookmarkFolder = bookmarkTreeNodes[0].children[0].children;
      bookmarkFolderTitle = "";
      for (_i = 0, _len = initBookmarkFolder.length; _i < _len; _i++) {
        bookmarkFolder = initBookmarkFolder[_i];
        if (bookmarkFolder.title === "conmarks") {
          bookmarkFolderTitle = bookmarkFolder;
          _ref = bookmarkFolder.children;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            m = _ref[_j];
            contextColor = "9F0";
            if (!storedContexts[m.title]) {
              storedContexts[m.title] = {
                color: contextColor,
                active: true
              };
            } else {
              contextColor = storedContexts[m.title].color;
            }
            context_div = $("<div>");
            context_div.addClass("bcontext");
            context_div.addClass(m.title);
            head = $("<div>");
            head.css("background", contextColor);
            head.addClass(m.title);
            title = $("<h2>");
            title.css("background", contextColor);
            title.addClass(m.title);
            title.text(m.title);
            color = $("<input>");
            color.attr("id", m.title);
            color.attr("name", m.title);
            color.attr("type", "text");
            color.attr("value", contextColor);
            head.append(color);
            head.append(title);
            context_div.append(head);
            color.colorPicker({
              onColorChange: function(id, newValue) {
                var $bcontent, $pheads, button, content, newhead, newhead2;

                newhead = ".bcontext." + id + " h2";
                newhead2 = ".bcontext ." + id;
                $(newhead).css("background", newValue);
                $(newhead2).css("background", newValue);
                button = "button." + id;
                content = "div.head." + id + ", div.content." + id + ".bookmark";
                $(button).css("background", newValue);
                $(content).css("background", newValue);
                $pheads = ".contextgroup." + id + " div.head";
                $($pheads).css("background", newValue);
                $bcontent = ".contextgroup." + id + " div.infocontent.bookmark";
                $($bcontent).css("background", newValue);
                storedContexts[id].color = newValue;
                chrome.storage.local.set({
                  "storedContexts": storedContexts
                });
                return null;
              }
            });
            $("#bookmarklist").append($(context_div));
            counter++;
            if (m.children != null) {
              _ref1 = m.children;
              for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                o = _ref1[_k];
                bookMarks[o.url] = {
                  context: m.title,
                  id: o.title,
                  bid: o.id
                };
                if (!storedBookmarks[o.url]) {
                  storedBookmarks[o.url] = {
                    bid: o.id,
                    visitTime: o.dateAdded
                  };
                }
                bm_div = $("<div>");
                bm_div.addClass("bookmark");
                favicon = $("<img>");
                favicon.attr({
                  src: "chrome://favicon/" + o.url
                });
                favicon.addClass("favic");
                bm_div.append($(favicon));
                bmtitle = $("<a>");
                bmtitle.attr("href", o.url);
                bmtitle.text(o.title);
                bm_div.append(bmtitle);
                context_div.append(bm_div);
              }
            } else {
              bookMarks[m.url] = {
                context: void 0,
                id: m.title,
                bid: m.id
              };
            }
          }
        }
        null;
      }
      if (!bookmarkFolderTitle) {
        chrome.bookmarks.create({
          'parentId': "1",
          'title': 'conmarks'
        }, function(bookmarkTreeNodes) {
          chrome.bookmarks.create({
            'parentId': bookmarkTreeNodes.id,
            'title': 'privat'
          }, function(bookmarkTreeNodes) {
            return null;
          });
          chrome.bookmarks.create({
            'parentId': bookmarkTreeNodes.id,
            'title': 'arbeit'
          }, function(bookmarkTreeNodes) {
            return null;
          });
          chrome.bookmarks.create({
            'parentId': bookmarkTreeNodes.id,
            'title': 'uni'
          }, function(bookmarkTreeNodes) {
            return null;
          });
          return null;
        });
      }
      context_div = $("<div>");
      context_div.addClass("bcontext");
      context_div.addClass("newcontext");
      head = $("<h2>");
      head.addClass("newcontext");
      head.text("+");
      context_div.append(head);
      $("#bookmarklist").append($(context_div));
      hideInactiveTasks();
      callbackFn();
      return null;
    });
    return null;
  };

  hideInactiveTasks = function() {
    var button, content, context, v, _results;

    _results = [];
    for (context in storedContexts) {
      v = storedContexts[context];
      button = "button." + context;
      content = "div.head." + context + ", div.content." + context + ".bookmark";
      $(button).css("background", v.color);
      $(content).css("background", v.color);
      if (!v.active) {
        _results.push(toggleActiveState(context));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  toggleActiveState = function(context) {
    var contextClass, toggleBookmark, toggleContext;

    toggleContext = ".bcontext." + context;
    $(toggleContext).toggleClass("contextactivestate");
    toggleBookmark = ".bcontext." + context + " .bookmark";
    $(toggleBookmark).toggle("fast");
    contextClass = "#historycontent ." + context;
    $(contextClass).toggle("fast");
    $(contextClass).css("display", "inline");
    return null;
  };

  bookmarkIt = function(site, button) {
    var context, url;

    context = button.attr("class");
    url = site.url;
    if (bookMarks[url] != null) {
      if (bookMarks[url].context === context) {
        chrome.bookmarks.remove(storedBookmarks[url].bid, function() {
          delete storedBookmarks[site.url];
          return reload();
        });
      } else if (bookMarks[url].context !== void 0) {
        chrome.bookmarks.remove(storedBookmarks[url].bid, function() {
          delete storedBookmarks[site.url];
          return createBookmark(site, context);
        });
      }
    } else {
      createBookmark(site, context);
    }
    return null;
  };

  createBookmark = function(site, context) {
    chrome.bookmarks.getTree(function(bookmarkTreeNodes) {
      var bookmarkfolder, contextfolder, folder, m, newtitle, sub, _i, _j, _len, _len1, _ref;

      folder = bookmarkTreeNodes[0].children[0].children;
      newtitle = "" + site.vid + "___" + site.title;
      bookmarkfolder = void 0;
      contextfolder = void 0;
      for (_i = 0, _len = folder.length; _i < _len; _i++) {
        sub = folder[_i];
        if (sub.title === "conmarks") {
          bookmarkfolder = sub;
        }
      }
      _ref = bookmarkfolder.children;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        m = _ref[_j];
        if (context === m.title) {
          contextfolder = m;
          chrome.bookmarks.create({
            parentId: m.id,
            title: site.title,
            url: site.url
          }, function(BookmarkTreeNode) {
            storedBookmarks[site.url] = {
              bid: BookmarkTreeNode.id,
              visitTime: site.time
            };
            return reload();
          });
        }
      }
      if (contextfolder === void 0) {
        return chrome.bookmarks.create({
          parentId: bookmarkfolder.id,
          title: context
        }, function(bookmarkTreeNodes) {
          storedContexts[context] = {
            color: "#fff".id
          };
          console.log(bookmarkTreeNodes);
          contextfolder = bookmarkTreeNodes;
          return chrome.bookmarks.create({
            parentId: contextfolder.id,
            title: site.title,
            url: site.url
          }, function() {
            return reload();
          });
        });
      }
    });
    return null;
  };

  null;

}).call(this);
