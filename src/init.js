// Generated by CoffeeScript 1.6.2
(function() {
  var blockId, blockStyle, blocks, bookMarks, bookmarkIt, bookmartise, context, createBookmark, filter, hSlider, loadBookmarks, loadHistory, processVisitItems, processed, reload, renderItem, siteHistory, specialise, storedBookmarks, storedContexts, tabconnections, v_max, visitId_pointo_SiteId;

  v_max = 0;

  filter = {
    results: 50,
    time: 0,
    query: "",
    mode: "none"
  };

  context = "empty";

  hSlider = 0;

  processed = 0;

  storedBookmarks = {};

  storedContexts = {};

  bookMarks = {};

  siteHistory = [];

  tabconnections = {};

  blockId = 0;

  blocks = {};

  visitId_pointo_SiteId = [];

  blockStyle = [];

  reload = function() {
    chrome.storage.local.set({
      "storedBookmarks": storedBookmarks
    });
    $('#historycontent').empty();
    $('#bookmarklist').empty();
    siteHistory = [];
    bookMarks = {};
    tabconnections = {};
    v_max = 0;
    blockId = 0;
    blocks = {};
    visitId_pointo_SiteId = [];
    blockStyle = [];
    return loadBookmarks();
  };

  $(document).ready(function() {
    var max, min, query_slider;

    chrome.storage.local.get("query", function(result) {
      if (result.query != null) {
        filter.query = result.query;
        return $("#search").val(result.query);
      }
    });
    chrome.storage.local.get("hSlider", function(result) {
      if (result.hSlider != null) {
        return query_slider.x = result.hSlider;
      }
    });
    chrome.storage.local.get("storedBookmarks", function(result) {
      if (result.storedBookmarks) {
        return storedBookmarks = result.storedBookmarks;
      }
    });
    chrome.storage.local.get("storedContexts", function(result) {
      if (result.storedContexts) {
        return storedContexts = result.storedContexts;
      }
    });
    min = 50;
    max = 500;
    query_slider = new Dragdealer('simple-slider', {
      x: hSlider,
      steps: max,
      callback: function(x, y) {
        filter.results = parseInt((max - min) * query_slider.value.current[0] + min);
        chrome.storage.local.set({
          "hSlider": x
        });
        return reload();
      },
      animationCallback: function(x, y) {
        return $("#handle_amount").text(parseInt((max - min) * x + min));
      }
    });
    $("#search").change(function() {
      filter.query = $('#search').val();
      $("#historycontent").empty();
      chrome.storage.local.set({
        "query": filter.query
      });
      return reload();
    });
    chrome.storage.local.get("tabConnections", function(result) {
      if (result.tabConnections) {
        tabconnections = result.tabConnections;
      } else {
        tabconnections = [];
      }
      return loadBookmarks();
    });
    $("#bookmarklist").on("click", "h2", function() {
      var contextClass, toggleBookmark, toggleContext;

      console.log($(this).context.className);
      toggleContext = ".bcontext." + $(this).context.className.split(" ")[0];
      $(toggleContext).toggleClass("contextactivestate");
      toggleBookmark = "." + $(this).context.className.split(" ")[0] + " .bookmark";
      $(toggleBookmark).toggle("fast");
      contextClass = "#historycontent ." + $(this).context.className.split(" ")[0];
      return $(contextClass).toggle("fast");
    });
    return null;
  });

  loadBookmarks = function() {
    var context_div, counter, head;

    context_div = $("<div>");
    context_div.addClass("bcontext");
    context_div.addClass("c0");
    head = $("<h2>");
    head.addClass("c0");
    head.text("kontextlos");
    context_div.append(head);
    $("#bookmarklist").append($(context_div));
    counter = 0;
    chrome.bookmarks.getTree(function(bookmarkTreeNodes) {
      var bfolder, bm_div, bmtitle, color, contextColor, favicon, m, morebms, n, o, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;

      bfolder = "";
      morebms = bookmarkTreeNodes[0].children[0].children;
      for (_i = 0, _len = morebms.length; _i < _len; _i++) {
        n = morebms[_i];
        if (n.title === "conmarks") {
          bfolder = n.title;
          _ref = n.children;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            m = _ref[_j];
            contextColor = "9F0";
            if (!storedContexts[m.title]) {
              storedContexts[m.title] = {
                color: contextColor
              };
            } else {
              contextColor = storedContexts[m.title].color;
            }
            context_div = $("<div>");
            context_div.addClass("bcontext");
            context_div.addClass(m.title);
            head = $("<h2>");
            head.css("background", contextColor);
            head.addClass(m.title);
            head.text(m.title);
            color = $("<input>");
            color.attr("id", m.title);
            color.attr("name", m.title);
            color.attr("type", "text");
            color.attr("value", contextColor);
            context_div.append(color);
            color.colorPicker({
              onColorChange: function(id, newValue) {
                var newhead;

                newhead = ".bcontext." + id + " h2";
                console.log(newhead);
                $(newhead).css("background", newValue);
                storedContexts[id].color = newValue;
                return chrome.storage.local.set({
                  "storedContexts": storedContexts
                });
              }
            });
            context_div.append(head);
            $("#bookmarklist").append($(context_div));
            counter++;
            if (m.children != null) {
              _ref1 = m.children;
              for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                o = _ref1[_k];
                console.log(o);
                bookMarks[o.url] = {
                  context: m.title,
                  id: o.title,
                  bid: o.id
                };
                if (!storedBookmarks[o.url]) {
                  storedBookmarks[o.url] = {
                    bid: o.id,
                    visitTime: o.dateAdded
                  };
                }
                bm_div = $("<div>");
                bm_div.addClass("bookmark");
                favicon = $("<img>");
                favicon.attr({
                  src: "chrome://favicon/" + o.url
                });
                favicon.addClass("favic");
                bm_div.append($(favicon));
                bmtitle = $("<p>");
                bmtitle.text(o.title);
                bm_div.append(bmtitle);
                context_div.append(bm_div);
              }
            } else {
              bookMarks[m.url] = {
                context: void 0,
                id: m.title,
                bid: m.id
              };
            }
          }
        }
      }
      if (!bfolder) {
        chrome.bookmarks.create({
          'parentId': "2",
          'title': 'conmarks'
        }, function(bookmarkTreeNodes) {
          return null;
        });
      }
      context_div = $("<div>");
      context_div.addClass("bcontext");
      context_div.addClass("c+");
      head = $("<h2>");
      head.addClass("c+");
      head.text("+");
      context_div.append(head);
      return $("#bookmarklist").append($(context_div));
    });
    return loadHistory();
  };

  loadHistory = function() {
    var date, daydate, endtime, microsecondsPerDay, mode, starttime, time;

    time = filter.time;
    mode = filter.mode;
    processed = 0;
    date = new Date();
    daydate = date.getTime() - ((((date.getHours() + 1) * 60 + date.getMinutes()) * 60 + date.getSeconds()) * 1000);
    microsecondsPerDay = 1000 * 60 * 60 * 24;
    endtime = daydate - (microsecondsPerDay * (time - 1));
    starttime = daydate - (microsecondsPerDay * (30 + time));
    return chrome.history.search({
      text: filter.query,
      startTime: starttime,
      endTime: endtime,
      maxResults: filter.results
    }, function(historyItems) {
      (historyItems.reverse()).forEach(function(site) {
        processed++;
        return chrome.history.getVisits({
          url: site.url
        }, function(visitItems) {
          return processVisitItems(site, visitItems);
        });
      });
      return null;
    });
  };

  processVisitItems = function(site, visitItems) {
    var SiteItem, bookmark, i, id, noblockreferred, ref, referrer, referringSiteId, refs, relevance, time, type, vid, _i, _len;

    id = site.id;
    vid = visitItems[visitItems.length - 1].visitId;
    type = visitItems[visitItems.length - 1].transition;
    time = visitItems[visitItems.length - 1].visitTime;
    ref = visitItems[visitItems.length - 1].referringVisitId;
    relevance = visitItems.length;
    /*----------------------------------------------------------------------------------------
    */

    refs = "";
    referrer = [];
    noblockreferred = true;
    referringSiteId = "";
    for (_i = 0, _len = visitItems.length; _i < _len; _i++) {
      i = visitItems[_i];
      if (tabconnections[i.visitId] != null) {
        type = "tab";
        ref = tabconnections[i.visitId];
        referrer.push(tabconnections[i.visitId]);
      }
      if (visitId_pointo_SiteId[ref] != null) {
        noblockreferred = false;
        referringSiteId = visitId_pointo_SiteId[ref];
      }
      visitId_pointo_SiteId[i.visitId] = id;
      if (i.referringVisitId !== "0") {
        referrer.push(i.referringVisitId);
      }
    }
    /*----------------------------------------------------------------------------------------
    */

    if (noblockreferred) {
      blocks[id] = blockId;
      blockId++;
      if (referrer.length > 0) {
        null;
      }
    } else {
      blocks[id] = blocks[referringSiteId];
    }
    SiteItem = {
      sid: site.id,
      vid: vid,
      url: site.url,
      title: site.title,
      type: type,
      ref: ref,
      relevance: relevance,
      block: blockId,
      sidref: referringSiteId,
      time: time
    };
    bookmark = bookMarks[site.url] != null ? null : void 0;
    siteHistory[id] = SiteItem;
    processed--;
    if (processed === 0) {
      return bookmartise();
    }
  };

  bookmartise = function() {
    var bmsProcessed, bookmark, item, key, val, _ref, _results;

    console.log(storedContexts);
    bmsProcessed = 0;
    for (key in siteHistory) {
      val = siteHistory[key];
      bmsProcessed++;
      bookmark = bookMarks[val.url] != null ? (bookMarks[val.url].bid, val.bookmark = true, blockStyle[blocks[key]] = bookMarks[val.url].context) : void 0;
    }
    /*
        for (key in findOutlater) {
          val = findOutlater[key];
          if (val !== "0") {
            oldblockindex = blocks[key];
            newblockindex = blocks[visitId_pointo_SiteId[val]];
            blocks[key] = newblockindex;
            for (kk in blocks) {
              val = blocks[kk];
              if (val === oldblockindex) {
                blocks[kk] = newblockindex;
              }
            }
          }
        }
    */

    if (bmsProcessed = filter.results) {
      siteHistory.sort(function(a, b) {
        if (a.vid >= b.vid) {
          return 1;
        } else {
          return -1;
        }
      });
      _ref = siteHistory.reverse();
      _results = [];
      for (key in _ref) {
        item = _ref[key];
        _results.push(specialise(item));
      }
      return _results;
    }
  };

  specialise = function(site) {
    var shorten, special, title, url;

    url = site.url;
    title = site.title;
    context = void 0;
    special = void 0;
    if (((url.substr(-4)) === ".jpg") || ((url.substr(-4)) === ".png") || ((url.substr(-5)) === ".jpeg")) {
      special = "image";
      title = "Abbildung";
    } else if ((/youtube/.test(url)) && (/watch/.test(url))) {
      title = title.split("- YouTube")[0];
      if (v_max > 0) {
        url = "https://www.youtube.com/embed/" + url.split("v=")[1].split('=')[0].split('&')[0];
        special = "video";
        v_max--;
      }
    } else if (/Google-Suche/.test(title)) {
      special = "google";
    } else if (/mail.google.com/.test(url)) {
      special = "mail";
    }
    title = title.split(" - ")[0];
    title = title.split(" – ")[0];
    shorten = 40;
    title = title.length > shorten ? title.substr(0, shorten) + "..." : title;
    site.url = url;
    site.title = title;
    site.special = special;
    if (title === "") {
      special = "empty";
      return site.title = url;
    } else {
      return renderItem(site);
    }
  };

  renderItem = function(item) {
    var bid, button1, button2, button3, clear, content_div, favicon, head_div, info, info1, info2, inhalt, link, panel_div, pic, qtl, ref, relevance, sid, special, title, ttl, type, url, utl, vid, videoframe;

    title = item.title;
    url = item.url;
    sid = item.sid;
    vid = item.vid;
    type = item.type;
    bid = item.bid;
    special = item.special;
    ref = item.ref;
    relevance = item.relevance;
    panel_div = $("<div>");
    panel_div.addClass("panel");
    panel_div.addClass(type);
    if (item.nav != null) {
      panel_div.addClass(item.nav);
    }
    if (ref === "0") {
      panel_div.addClass("refzero");
    }
    if (relevance > 20) {
      panel_div.addClass("rel_big");
    } else if (relevance > 5) {
      panel_div.addClass("rel_some");
    } else if (relevance >= 2) {
      panel_div.addClass("rel_twice");
    }
    head_div = $("<div>");
    content_div = $("<div>");
    content_div.addClass("content");
    head_div.addClass("head");
    favicon = $("<img>");
    favicon.attr({
      src: "chrome://favicon/" + url
    });
    favicon.addClass("favicon");
    head_div.append($(favicon));
    if (special !== "google" && special !== "empty") {
      button1 = $("<button>");
      button1.text("");
      button1.click(function() {
        return bookmarkIt(item, "privat");
      });
      button2 = $("<button>");
      button2.text("");
      button2.click(function() {
        return bookmarkIt(item, "uni");
      });
      button3 = $("<button>");
      button3.text("");
      button3.click(function() {
        return bookmarkIt(item, "arbeit");
      });
      button1.addClass("privat");
      button2.addClass("uni");
      button3.addClass("arbeit");
      head_div.append($(button3));
      head_div.append($(button2));
      head_div.append($(button1));
    }
    clear = $("<div>");
    clear.addClass("clear");
    head_div.append($(clear));
    if (blockStyle[blocks[item.sid]] != null) {
      context = blockStyle[blocks[item.sid]];
      head_div.addClass(context);
      panel_div.addClass(context);
    } else {
      panel_div.addClass("c0");
    }
    if (item.bookmark !== void 0) {
      context += " bookmark";
      content_div.addClass(context);
    }
    link = $("<a>");
    inhalt = $("<p>");
    link.attr({
      href: url
    });
    link.addClass("urladress");
    if (filter.query !== "") {
      qtl = filter.query.toLowerCase();
      ttl = title.toLowerCase();
      utl = url.toLowerCase();
      if (ttl.indexOf(qtl) < 0 && utl.indexOf(qtl) > 0) {
        panel_div.addClass("lessimportant");
      } else if (ttl.indexOf(qtl) < 0 && utl.indexOf(qtl) < 0) {
        panel_div.addClass("unimportant");
      }
    }
    if (special === "image") {
      pic = $("<img>");
      pic.attr({
        src: url.substr(url.search(/http/))
      });
      pic.addClass("imgpreview");
      inhalt.append(pic);
      link.append($(inhalt));
    } else if (special === "google") {
      title = title.split(" - Google-Suche")[0];
      inhalt.text(title);
      inhalt.attr({
        id: sid
      });
      link.append($(inhalt));
    } else if (special === "video") {
      videoframe = $("<iframe>");
      videoframe.addClass("youtubevideo");
      videoframe.attr({
        src: url
      });
      content_div.append(videoframe);
    } else {
      inhalt.text(title);
      inhalt.attr({
        id: sid
      });
      link.append($(inhalt));
    }
    info = $("<p>");
    info.addClass("devinfo");
    info.text("Block: " + item.block);
    info1 = $("<p>");
    info1.addClass("devinfo");
    info1.text(sid + " > " + item.sidref);
    info2 = $("<p>");
    info2.addClass("devinfo");
    info2.text(vid + " > " + ref);
    content_div.append($(link));
    content_div.append($(info));
    content_div.append($(info1));
    content_div.append($(info2));
    panel_div.addClass(special);
    panel_div.append(head_div);
    panel_div.append($(content_div));
    return $("#historycontent").append($(panel_div));
  };

  bookmarkIt = function(site, context) {
    var url;

    console.log(storedBookmarks[site.url]);
    url = site.url;
    context = context;
    if (bookMarks[url] != null) {
      if (bookMarks[url].context === context) {
        return chrome.bookmarks.remove(storedBookmarks[url].bid, function() {
          delete storedBookmarks[site.url];
          return reload();
        });
      } else if (bookMarks[url].context !== void 0) {
        return chrome.bookmarks.remove(storedBookmarks[url].bid, function() {
          delete storedBookmarks[site.url];
          return createBookmark(site, context);
        });
      }
    } else {
      return createBookmark(site, context);
    }
  };

  createBookmark = function(site, context) {
    return chrome.bookmarks.getTree(function(bookmarkTreeNodes) {
      var bookmarkfolder, contextfolder, folder, m, newtitle, sub, _i, _j, _len, _len1, _ref;

      folder = bookmarkTreeNodes[0].children[0].children;
      newtitle = "" + site.vid + "___" + site.title;
      bookmarkfolder = void 0;
      contextfolder = void 0;
      for (_i = 0, _len = folder.length; _i < _len; _i++) {
        sub = folder[_i];
        if (sub.title === "conmarks") {
          bookmarkfolder = sub;
        }
      }
      _ref = bookmarkfolder.children;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        m = _ref[_j];
        if (context === m.title) {
          contextfolder = m;
          chrome.bookmarks.create({
            parentId: m.id,
            title: site.title,
            url: site.url
          }, function(BookmarkTreeNode) {
            storedBookmarks[site.url] = {
              bid: BookmarkTreeNode.id,
              visitTime: site.time
            };
            return reload();
          });
        }
      }
      if (contextfolder === void 0) {
        return chrome.bookmarks.create({
          parentId: bookmarkfolder.id,
          title: context
        }, function(bookmarkTreeNodes) {
          storedContexts[context] = {
            color: "#fff".id
          };
          console.log(bookmarkTreeNodes);
          contextfolder = bookmarkTreeNodes;
          return chrome.bookmarks.create({
            parentId: contextfolder.id,
            title: site.title,
            url: site.url
          }, function() {
            return reload();
          });
        });
      }
    });
  };

}).call(this);
