// Generated by CoffeeScript 1.6.1
(function() {
  var blockId, blockStyle, blocks, bookMarks, bookmarkIt, bookmartise, context, createBookmark, filter, forwardbackward, hSlider, lastIndex, loadBookmarks, loadHistory, processTabConnections, processVisitItems, processed, refArray, refMissing, refToBlock, reload, renderItem, siteContext, siteHistory, siteNetwork, specialise, tabconnections, urltoSid, v_max, visitIdArray;

  v_max = 0;

  filter = {
    results: 50,
    time: 0,
    query: "",
    mode: "none"
  };

  context = "empty";

  hSlider = 0;

  processed = 0;

  bookMarks = {};

  siteHistory = [];

  tabconnections = [];

  siteNetwork = [];

  siteContext = [];

  visitIdArray = {};

  refArray = [];

  blockId = 0;

  blocks = {};

  refToBlock = [];

  blockStyle = [];

  refMissing = [];

  urltoSid = {};

  lastIndex = 10000000000000;

  forwardbackward = [];

  $(document).ready(function() {
    var max, min, query_slider;
    chrome.storage.local.get("query", function(result) {
      if (result.query != null) {
        filter.query = result.query;
        return $("#search").val(result.query);
      }
    });
    chrome.storage.local.get("hSlider", function(result) {
      if (result.hSlider != null) {
        return query_slider.x = result.hSlider;
      }
    });
    min = 50;
    max = 500;
    query_slider = new Dragdealer('simple-slider', {
      x: hSlider,
      steps: max,
      callback: function(x, y) {
        filter.results = parseInt((max - min) * query_slider.value.current[0] + min);
        chrome.storage.local.set({
          "hSlider": x
        });
        return reload();
      },
      animationCallback: function(x, y) {
        return $("#handle_amount").text(parseInt((max - min) * x + min));
      }
    });
    $("#search").change(function() {
      filter.query = $('#search').val();
      $("#historycontent").empty();
      chrome.storage.local.set({
        "query": filter.query
      });
      return reload();
    });
    chrome.storage.local.get("connections", function(result) {
      if (result.connections != null) {
        tabconnections = result.connections;
      } else {
        tabconnections = [];
      }
      return loadBookmarks();
    });
    return null;
  });

  reload = function() {
    $('#historycontent').empty();
    siteHistory = [];
    bookMarks = {};
    loadBookmarks();
    visitIdArray = [];
    siteContext = [];
    v_max = 0;
    blocks = {};
    refToBlock = [];
    blockStyle = [];
    return blockId = 0;
  };

  loadBookmarks = function() {
    var todo;
    todo = 0;
    return chrome.bookmarks.getTree(function(bookmarkTreeNodes) {
      var m, morebms, n, o, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      morebms = bookmarkTreeNodes[0].children[1].children;
      for (_i = 0, _len = morebms.length; _i < _len; _i++) {
        n = morebms[_i];
        if (n.title === "conmarks") {
          _ref = n.children;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            m = _ref[_j];
            todo++;
            if (m.children != null) {
              _ref1 = m.children;
              for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                o = _ref1[_k];
                todo++;
                bookMarks[o.url] = {
                  context: m.title,
                  id: o.title.split("___", 1)[0],
                  bid: o.id
                };
                todo--;
              }
              todo--;
            } else {
              bookMarks[m.url] = {
                context: void 0,
                id: m.title.split("___", 1)[0],
                bid: m.id
              };
              todo--;
            }
          }
        }
      }
      if (todo === 0) {
        loadHistory();
      }
      return null;
    });
  };

  loadHistory = function() {
    var date, daydate, endtime, microsecondsPerDay, mode, starttime, time;
    time = filter.time;
    mode = filter.mode;
    processed = 0;
    date = new Date();
    daydate = date.getTime() - ((((date.getHours() + 1) * 60 + date.getMinutes()) * 60 + date.getSeconds()) * 1000);
    microsecondsPerDay = 1000 * 60 * 60 * 24;
    endtime = daydate - (microsecondsPerDay * (time - 1));
    starttime = daydate - (microsecondsPerDay * (30 + time));
    chrome.history.search({
      text: filter.query,
      maxResults: filter.results,
      startTime: starttime,
      endTime: endtime
    }, function(historyItems) {
      historyItems.forEach(function(site) {
        processed++;
        return chrome.history.getVisits({
          url: site.url
        }, function(visitItems) {
          return processVisitItems(site, visitItems);
        });
      });
      return null;
    });
    return null;
  };

  processVisitItems = function(site, visitItems) {
    var SiteItem, blockofreferredsid, i, id, noblockreferred, ref, referrer, relevance, type, vid, visits, _i, _len;
    id = site.id;
    vid = visitItems[visitItems.length - 1].visitId;
    type = visitItems[visitItems.length - 1].transition;
    ref = visitItems[visitItems.length - 1].referringVisitId;
    relevance = visitItems.length;
    /*----------------------------------------------------------------------------------------
    */

    visits = [];
    referrer = [];
    noblockreferred = true;
    blockofreferredsid = 0;
    for (_i = 0, _len = visitItems.length; _i < _len; _i++) {
      i = visitItems[_i];
      visits.push(i.visitId);
      if (i.referringVisitId !== "0") {
        referrer.push(i.referringVisitId);
      }
      visitIdArray[i.visitId] = {
        sid: id,
        ref: i.referringVisitId,
        vid: i.visitId
      };
      refToBlock[i.referringVisitId] = id;
      if (refToBlock[i.visitId] != null) {
        noblockreferred = false;
        blockofreferredsid = refToBlock[i.visitId];
      }
    }
    siteNetwork[id] = {
      visits: visits,
      referrer: referrer
    };
    /*----------------------------------------------------------------------------------------
    */

    if (referrer.length === 0) {
      refMissing[id] = site.url;
    }
    if (noblockreferred) {
      if (refToBlock[ref] = id) {
        null;
      }
      console.log(visitItems[visitItems.length - 1]);
      blocks[id] = blockId;
      blockId++;
    } else {
      blocks[id] = blocks[blockofreferredsid];
    }
    lastIndex = id;
    SiteItem = {
      sid: site.id,
      vid: vid,
      url: site.url,
      title: site.title,
      type: type,
      ref: ref,
      relevance: relevance
    };
    urltoSid[site.url] = id;
    siteHistory[id] = SiteItem;
    processed--;
    if (processed === 0) {
      return processTabConnections();
    }
  };

  processTabConnections = function() {
    var id, item, key, kk, newblockindex, oldblockindex, processIt, ref_id, referrer, rid, sid, tc, v_url, val, _i, _j, _len, _len1, _ref;
    processIt = 0;
    for (_i = 0, _len = tabconnections.length; _i < _len; _i++) {
      tc = tabconnections[_i];
      processIt++;
      for (sid in refMissing) {
        v_url = refMissing[sid];
        if (v_url === tc.url) {
          ref_id = urltoSid[tc.refurl];
          siteHistory[sid].nav = tc.nav;
          if (ref_id !== void 0) {
            oldblockindex = blocks[sid];
            newblockindex = blocks[ref_id];
            blocks[sid] = newblockindex;
            for (kk in blocks) {
              val = blocks[kk];
              if (val === oldblockindex) {
                blocks[kk] = newblockindex;
              }
            }
          }
        }
      }
      /*          
      console.log tc
      if tc.nav is "forward_back"
        console.log tc.nav
        for sid,item of siteHistory
          
          refsid = visitIdArray[item.ref].sid
          oldblockindex = blocks[sid]
          newblockindex = blocks[refsid]
          blocks[sid] = newblockindex
          
          for kk,val of blocks 
            if val is oldblockindex
              console.log val
              blocks[kk] = newblockindex
      */

      processIt--;
    }
    referrer = [];
    referrer[666] = "chrome://newtab/";
    _ref = tabconnections.reverse();
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      tc = _ref[_j];
      id = 0;
      rid = tc.refurl;
      for (key in siteHistory) {
        item = siteHistory[key];
        if (item.url === tc.refurl) {
          rid = item.vid;
        }
        if (item.url === tc.url) {
          id = item.vid;
        }
      }
    }
    for (key in siteHistory) {
      item = siteHistory[key];
      item.block = blocks[key];
      if (item.ref === "0" && referrer[item.vid]) {
        null;
      }
    }
    for (key in visitIdArray) {
      item = visitIdArray[key];
      processIt++;
      if (visitIdArray[item.ref] != null) {
        siteHistory[item.sid].sidref = visitIdArray[item.ref].sid;
      }
      if (item.ref === "0" && referrer[item.vid]) {
        null;
      }
      processIt--;
    }
    if (processIt === 0) {
      return bookmartise();
    }
  };

  bookmartise = function() {
    var bookmark, bprocessed, item, key, val, _ref, _results;
    bprocessed = 0;
    for (key in siteHistory) {
      val = siteHistory[key];
      bprocessed++;
      bookmark = bookMarks[val.url] != null ? (bookMarks[val.url].bid, val.bookmark = true, blockStyle[blocks[key]] = bookMarks[val.url].context) : void 0;
    }
    if (bprocessed = filter.results) {
      siteHistory.sort(function(a, b) {
        if (a.vid >= b.vid) {
          return 1;
        } else {
          return -1;
        }
      });
      _ref = siteHistory.reverse();
      _results = [];
      for (key in _ref) {
        item = _ref[key];
        _results.push(specialise(item));
      }
      return _results;
    }
  };

  specialise = function(site) {
    var special, title, url;
    url = site.url;
    title = site.title;
    context = void 0;
    special = void 0;
    if (title === "") {
      special = "empty";
      title = url;
    } else {
      if (((url.substr(-4)) === ".jpg") || ((url.substr(-4)) === ".png") || ((url.substr(-5)) === ".jpeg")) {
        special = "image";
        title = "Abbildung";
      } else if ((/youtube/.test(url)) && (/watch/.test(url))) {
        title = title.split("- YouTube")[0];
        if (v_max > 0) {
          url = "https://www.youtube.com/embed/" + url.split("v=")[1].split('=')[0].split('&')[0];
          special = "video";
          v_max--;
        }
      } else if (/Google-Suche/.test(title)) {
        special = "google";
      } else if (/mail.google.com/.test(url)) {
        special = "mail";
      }
    }
    title = title.split(" - ")[0];
    title = title.length > 20 ? title.substr(0, 8) + "..." : title;
    site.url = url;
    site.title = title;
    site.special = special;
    return renderItem(site);
  };

  renderItem = function(item) {
    var bid, button, button2, button3, c_panel, clear, favicon, info, info1, info2, info3, inhalt, link, pic, qtl, ref, relevance, sid, special, t_panel, title, ttl, type, url, utl, vid, videoframe;
    title = item.title;
    url = item.url;
    sid = item.sid;
    vid = item.vid;
    type = item.type;
    bid = item.bid;
    special = item.special;
    ref = item.ref;
    relevance = item.relevance;
    if (blockStyle[blocks[item.sid]] != null) {
      item.context = blockStyle[blocks[item.sid]];
    }
    if (item.bookmark !== void 0) {
      item.context += " bookmark";
    }
    context = item.context;
    t_panel = $("<div>");
    t_panel.addClass("panel");
    t_panel.addClass(type);
    if (item.nav != null) {
      t_panel.addClass(item.nav);
    }
    if (ref === "0") {
      t_panel.addClass("refzero");
    }
    t_panel.addClass(special);
    c_panel = $("<div>");
    if (context !== void 0) {
      c_panel.addClass(context);
      c_panel.addClass(vid);
    }
    if (relevance > 20) {
      t_panel.addClass("rel_big");
    } else if (relevance > 5) {
      t_panel.addClass("rel_some");
    } else if (relevance >= 2) {
      t_panel.addClass("rel_twice");
    }
    link = $("<a>");
    link.attr({
      href: url
    });
    link.addClass("urladress");
    inhalt = $("<p>");
    favicon = $("<img>");
    favicon.attr({
      src: "chrome://favicon/" + url
    });
    favicon.addClass("favicon");
    c_panel.append($(favicon));
    if (special !== "google" && special !== "empty") {
      button = $("<button>");
      button.text("1");
      button.click(function() {
        return bookmarkIt(item, "first");
      });
      button2 = $("<button>");
      button2.text("2");
      button2.click(function() {
        return bookmarkIt(item, "second");
      });
      button3 = $("<button>");
      button3.text("3");
      button3.click(function() {
        return bookmarkIt(item, "third");
      });
      c_panel.append($(button));
      c_panel.append($(button2));
      c_panel.append($(button3));
    }
    clear = $("<div>");
    clear.addClass("clear");
    c_panel.append($(clear));
    if (filter.query !== "") {
      qtl = filter.query.toLowerCase();
      ttl = title.toLowerCase();
      utl = url.toLowerCase();
      if (ttl.indexOf(qtl) < 0 && utl.indexOf(qtl) > 0) {
        t_panel.addClass("lessimportant");
      } else if (ttl.indexOf(qtl) < 0 && utl.indexOf(qtl) < 0) {
        t_panel.addClass("unimportant");
      }
    }
    if (special === "image") {
      pic = $("<img>");
      pic.attr({
        src: url.substr(url.search(/http/))
      });
      pic.addClass("imgpreview");
      inhalt.append(pic);
      link.append($(inhalt));
    }
    if (special === "google") {
      title = title.split(" - Google-Suche")[0];
      inhalt.text(title);
      inhalt.attr({
        id: sid
      });
      link.append($(inhalt));
    }
    if (special === "video") {
      videoframe = $("<iframe>");
      videoframe.addClass("youtubevideo");
      videoframe.attr({
        src: url
      });
      c_panel.append(videoframe);
    } else {
      inhalt.text(title);
      inhalt.attr({
        id: sid
      });
      link.append($(inhalt));
    }
    t_panel.addClass(special);
    c_panel.append($(link));
    t_panel.append($(c_panel));
    info = $("<p>");
    info.addClass("referrer");
    info.text("Block: " + item.block);
    info1 = $("<p>");
    info1.addClass("referrer");
    info1.text(sid + " > " + item.sidref);
    info2 = $("<p>");
    info2.addClass("referrer");
    info2.text(vid + " > " + ref);
    info3 = $("<p>");
    info3.addClass("referrer");
    info3.text("");
    c_panel.append($(info));
    c_panel.append($(info1));
    c_panel.append($(info2));
    return $("#historycontent").append($(t_panel));
  };

  bookmarkIt = function(site, context) {
    var url;
    url = site.url;
    context = context;
    if (bookMarks[url] != null) {
      if (bookMarks[url].context === context) {
        return chrome.bookmarks.remove(bookMarks[url].bid, function() {
          return reload();
        });
      } else if (bookMarks[url].context !== void 0) {
        return chrome.bookmarks.remove(bookMarks[url].bid, function() {
          return createBookmark(site, context);
        });
      }
    } else {
      return createBookmark(site, context);
    }
  };

  createBookmark = function(site, context) {
    return chrome.bookmarks.getTree(function(bookmarkTreeNodes) {
      var folder, m, newtitle, sub, _i, _len, _results;
      folder = bookmarkTreeNodes[0].children[1].children;
      newtitle = "" + site.vid + "___" + site.title;
      _results = [];
      for (_i = 0, _len = folder.length; _i < _len; _i++) {
        sub = folder[_i];
        if (sub.title === "conmarks") {
          if (context === void 0) {
            _results.push(chrome.bookmarks.create({
              parentId: file.id,
              title: newtitle,
              url: site.url
            }, function() {
              return reload();
            }));
          } else {
            _results.push((function() {
              var _j, _len1, _ref, _results1;
              _ref = sub.children;
              _results1 = [];
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                m = _ref[_j];
                if (context === m.title) {
                  _results1.push(chrome.bookmarks.create({
                    parentId: m.id,
                    title: newtitle,
                    url: site.url
                  }, function() {
                    return reload();
                  }));
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            })());
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
  };

}).call(this);
