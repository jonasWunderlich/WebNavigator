// Generated by CoffeeScript 1.4.0
(function() {
  var bookmarks, filter, hSlider, historyWithRef, history_array, loadBookmarks, loadHistory, processVisits, processed, renderAlternative, renderItem, tabconnections, v_max;

  v_max = 5;

  filter = {
    results: 50,
    time: 0,
    query: "",
    mode: "none"
  };

  history_array = [];

  bookmarks = [];

  processed = 0;

  historyWithRef = [];

  tabconnections = [];

  hSlider = 0;

  $(document).ready(function() {
    var max, min, query_slider;
    chrome.storage.local.get("query", function(result) {
      if (result.query != null) {
        filter.query = result.query;
        return $("#search").val(result.query);
      }
    });
    chrome.storage.local.get("hSlider", function(result) {
      if (result.hSlider != null) {
        return query_slider.x = result.hSlider;
      }
    });
    min = 50;
    max = 500;
    query_slider = new Dragdealer('simple-slider', {
      x: hSlider,
      steps: max,
      callback: function(x, y) {
        filter.results = parseInt((max - min) * query_slider.value.current[0] + min);
        $('#historycontent').empty();
        chrome.storage.local.set({
          "hSlider": x
        });
        return loadHistory();
      },
      animationCallback: function(x, y) {
        return $("#handle_amount").text(parseInt((max - min) * x + min));
      }
    });
    $("#search").change(function() {
      filter.query = $('#search').val();
      $("#historycontent").empty();
      chrome.storage.local.set({
        "query": filter.query
      });
      return loadHistory();
    });
    chrome.storage.local.get("connections", function(result) {
      if (result.connections != null) {
        tabconnections = result.connections;
      } else {
        tabconnections = [];
      }
      return loadBookmarks();
    });
    return null;
  });

  loadBookmarks = function() {
    var todo;
    todo = 0;
    return chrome.bookmarks.getTree(function(bookmarkTreeNodes) {
      var m, morebms, n, o, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      morebms = bookmarkTreeNodes[0].children[1].children;
      for (_i = 0, _len = morebms.length; _i < _len; _i++) {
        n = morebms[_i];
        if (n.title === "conmarks") {
          _ref = n.children;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            m = _ref[_j];
            todo++;
            if (m.children != null) {
              _ref1 = m.children;
              for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                o = _ref1[_k];
                todo++;
                bookmarks.push({
                  context: m.title,
                  id: o.title.split("___", 1)[0],
                  bid: o.id
                });
                todo--;
              }
              todo--;
            } else {
              bookmarks.push({
                context: void 0,
                id: m.title.split("___", 1)[0],
                bid: m.id
              });
              todo--;
            }
          }
        }
      }
      if (todo === 0 && bookmarks.length !== 0) {
        loadHistory();
      }
      return null;
    });
  };

  loadHistory = function() {
    var date, daydate, endtime, microsecondsPerDay, mode, requeststodo, starttime, time;
    time = filter.time;
    mode = filter.mode;
    processed = 0;
    requeststodo = 0;
    date = new Date();
    daydate = date.getTime() - ((((date.getHours() + 1) * 60 + date.getMinutes()) * 60 + date.getSeconds()) * 1000);
    microsecondsPerDay = 1000 * 60 * 60 * 24;
    endtime = daydate - (microsecondsPerDay * (time - 1));
    starttime = daydate - (microsecondsPerDay * (30 + time));
    chrome.history.search({
      text: filter.query,
      maxResults: filter.results,
      startTime: starttime,
      endTime: endtime
    }, function(historyItems) {
      historyItems.forEach(function(n) {
        var processVisitsWithUrl, title, url;
        processed++;
        url = n.url;
        title = n.title;
        processVisitsWithUrl = function(url, title) {
          return function(visitItems) {
            return processVisits(url, title, visitItems, bookmarks);
          };
        };
        chrome.history.getVisits({
          url: n.url
        }, processVisitsWithUrl(url, title));
        return requeststodo++;
      });
      return null;
    });
    if (!requeststodo) {
      return null;
    }
    return null;
  };

  processVisits = function(url, title, visitItems, bookmarks) {
    var bid, bookmark, context, i, item, ref, relevance, special, type, vid;
    type = visitItems[visitItems.length - 1].transition;
    vid = visitItems[visitItems.length - 1].visitId;
    ref = visitItems[visitItems.length - 1].referringVisitId;
    relevance = visitItems.length;
    url = url;
    context = void 0;
    bid = void 0;
    special = void 0;
    title = title;
    if (title === "") {
      special = "empty";
      title = url;
    } else {
      if (((url.substr(-4)) === ".jpg") || ((url.substr(-4)) === ".png") || ((url.substr(-5)) === ".jpeg")) {
        special = "image";
        title = "Abbildung";
      } else if ((/youtube/.test(url)) && (/watch/.test(url))) {
        special = "video";
      } else if (/Google-Suche/.test(title)) {
        special = "google";
      }
    }
    bookmark = ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = bookmarks.length; _i < _len; _i++) {
        i = bookmarks[_i];
        if (i.id === vid) {
          _results.push(i);
        }
      }
      return _results;
    })())[0];
    if (bookmark != null) {
      context = bookmark.context;
      bid = bookmark.bid;
    }
    item = {
      id: vid,
      type: type,
      url: url,
      context: context,
      title: title,
      bid: bid,
      special: special,
      ref: ref,
      relevance: relevance
    };
    historyWithRef.push(item);
    processed--;
    if (processed === 0) {
      return renderAlternative();
    }
  };

  renderAlternative = function() {
    var id, item, referrer, rid, tc, _i, _j, _k, _len, _len1, _len2, _results;
    referrer = [];
    referrer[666] = "chrome://newtab/";
    for (_i = 0, _len = tabconnections.length; _i < _len; _i++) {
      tc = tabconnections[_i];
      id = 0;
      rid = tc.refurl;
      for (_j = 0, _len1 = historyWithRef.length; _j < _len1; _j++) {
        item = historyWithRef[_j];
        if (item.url === tc.refurl) {
          rid = item.id;
        }
        if (item.url === tc.url) {
          id = item.id;
        }
      }
      referrer[id] = rid;
    }
    for (_k = 0, _len2 = historyWithRef.length; _k < _len2; _k++) {
      item = historyWithRef[_k];
      if (item.ref === "0" && referrer[item.id]) {
        item.ref = referrer[item.id];
      }
    }
    historyWithRef.reverse();
    _results = [];
    while (historyWithRef.length > 0) {
      _results.push(renderItem(historyWithRef.pop()));
    }
    return _results;
  };

  renderItem = function(item) {
    var bid, button, button2, button3, c_panel, clear, context, favicon, id, inhalt, link, pic, qtl, ref, referer, relevance, special, t_panel, title, ttl, type, url, utl, vid, y_id;
    url = item.url;
    title = item.title;
    context = item.context;
    id = item.id;
    type = item.type;
    bid = item.bid;
    special = item.special;
    ref = item.ref;
    relevance = item.relevance;
    t_panel = $("<div>");
    t_panel.addClass("panel");
    t_panel.addClass(type);
    if (ref === "0") {
      t_panel.addClass("refzero");
    }
    t_panel.addClass(special);
    c_panel = $("<div>");
    c_panel.addClass(context);
    c_panel.addClass(bid);
    if (relevance > 20) {
      t_panel.addClass("rel_big");
    } else if (relevance > 5) {
      t_panel.addClass("rel_some");
    } else if (relevance >= 2) {
      t_panel.addClass("rel_twice");
    }
    link = $("<a>");
    link.attr({
      href: url
    });
    link.addClass("urladress");
    inhalt = $("<p>");
    favicon = $("<img>");
    favicon.attr({
      src: "chrome://favicon/" + url
    });
    favicon.addClass("favicon");
    c_panel.append($(favicon));
    referer = $("<p>");
    referer.addClass("referrer");
    referer.text(id + " <- " + ref);
    if (special !== "google") {
      button = $("<button>");
      button.text("1");
      button.click(function() {
        return bookmark(c_panel, bid, id, url, title, "first");
      });
      button2 = $("<button>");
      button2.text("2");
      button2.click(function() {
        return bookmark(c_panel, bid, id, url, title, "second");
      });
      button3 = $("<button>");
      button3.text("3");
      button3.click(function() {
        return bookmark(c_panel, bid, id, url, title, "third");
      });
      c_panel.append($(button));
      c_panel.append($(button2));
      c_panel.append($(button3));
    }
    clear = $("<div>");
    clear.addClass("clear");
    c_panel.append($(clear));
    if (filter.query !== "") {
      qtl = filter.query.toLowerCase();
      ttl = title.toLowerCase();
      utl = url.toLowerCase();
      if (ttl.indexOf(qtl) < 0 && utl.indexOf(qtl) > 0) {
        t_panel.addClass("lessimportant");
      } else if (ttl.indexOf(qtl) < 0 && utl.indexOf(qtl) < 0) {
        t_panel.addClass("unimportant");
      }
    }
    if (special === "image") {
      pic = $("<img>");
      pic.attr({
        src: url.substr(url.search(/http/))
      });
      pic.addClass("imgpreview");
      inhalt.append(pic);
      link.append($(inhalt));
    } else if ((url != null) && special === "video") {
      if (v_max >= 0) {
        vid = $("<iframe>");
        vid.addClass("youtubevideo");
        y_id = "https://www.youtube.com/embed/" + url.split("watch?v=")[1].split('=')[0].split('&')[0];
        vid.attr({
          src: y_id
        });
        c_panel.append(vid);
        v_max--;
      } else {
        inhalt.text(title);
        inhalt.attr({
          id: id
        });
        link.append($(inhalt));
      }
    } else if (special === "google") {
      title = title.split(" - Google-Suche")[0];
      inhalt.text(title);
      inhalt.attr({
        id: id
      });
      link.append($(inhalt));
    } else {
      inhalt.text(title);
      inhalt.attr({
        id: id
      });
      link.append($(inhalt));
    }
    t_panel.addClass(special);
    c_panel.append($(link));
    c_panel.append($(referer));
    t_panel.append($(c_panel));
    return $("#historycontent").append($(t_panel));
  };

}).call(this);
